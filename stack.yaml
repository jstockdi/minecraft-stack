AWSTemplateFormatVersion: '2010-09-09'
Description: 'Minecraft Server on AWS EC2'

Parameters:
  Route53ZoneId:
    Type: String
    Description: Value of the Route53 Zone id

  DomainName:
      Type: String
      Description: Domain name of the server

Resources:
  MinecraftSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable SSH and Minecraft server port'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 25565
          ToPort: 25565
          CidrIp: 0.0.0.0/0


  MinecraftServerRoute53Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com 
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: EnderpigsRoute53UpdaterPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "route53:ChangeResourceRecordSets"
                Resource: !Join
                  - ''
                  - - 'arn:aws:route53:::hostedzone/'
                    - !Ref Route53ZoneId

              
  MinecraftServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref MinecraftServerRoute53Role 

  MinecraftServer:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: m6i.xlarge
      ImageId: ami-079ea43d31a4fb4d8
      KeyName: MinecraftKey
      IamInstanceProfile: !Ref MinecraftServerInstanceProfile

      SecurityGroups:
        - Ref: MinecraftSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 16 # Size of the EBS volume in GB
      Tags:
        - Key: Name
          Value: MinecraftServer
      UserData:
        Fn::Base64: 
          !Sub 
            - |
              #!/bin/bash

              export ROUTE53_ZONEID=${Route53ZoneId}
              export DOMAIN_NAME=${DomainName}
              /bin/bash -c "$(curl -sSL https://raw.githubusercontent.com/jstockdi/minecraft-stack/main/install.sh)"  

            - Route53ZoneId: !Ref Route53ZoneId




  BackupRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: BackupRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: backup.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BackupPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Resource: !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref BackupS3Bucket
                    - '/*'


  BackupVault:
    Type: "AWS::Backup::BackupVault"
    Properties:
      BackupVaultName: "MinecraftServerVault"


  BackupPlan:
    Type: AWS::Backup::BackupPlan
    Properties:
      BackupPlan:
        BackupPlanName: MinecraftServerBackupPlan
        BackupPlanRule:
          - RuleName: "DailyBackupRule"
            TargetBackupVault: !Ref BackupVault
            ScheduleExpression: "cron(0 12 ? * * *)"
            StartWindowMinutes: 60
            Lifecycle:
              DeleteAfterDays: 30


  BackupSelection:
    Type: AWS::Backup::BackupSelection
    Properties:
      BackupPlanId: !Ref BackupPlan
      BackupSelection:
        IamRoleArn: !GetAtt BackupRole.Arn
        SelectionName: MinecraftServerBackupSelection
        Resources:
          - !Join
            - ""
            - - "arn:aws:ec2:"
              - !Ref AWS::Region
              - ":"
              - !Ref AWS::AccountId
              - ":instance/"
              - !Ref MinecraftServer



  BackupS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: jstockdi-minecraft-stack-backup


 
  ServerStartLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'ServerStartGetFunction'
      Handler: 'index.handler'
      Role: 
        Fn::GetAtt:
          - ServerStartLambdaExecutionRole
          - Arn
      Code:
        ZipFile: |
          import boto3

          def handler(event, context):
            # Create EC2 client
            try:
              ec2_client = boto3.client('ec2')
              
            
              # Filter instances by tag
              filters = [{'Name': 'tag:Name', 'Values': ['MinecraftServer']}]
              reservations = ec2_client.describe_instances(Filters=filters)
              
              # Check if any instances found
              if not reservations['Reservations']:
                print("No EC2 instance found with the tag 'MinecraftServer'")
                return {'message': 'No Minecraft instance found'}
                

              # Extract instance ID from first reservation
              instance_id = reservations['Reservations'][0]['Instances'][0]['InstanceId']
              
              ec2_client.start_instances(InstanceIds=[instance_id])
              print(f"EC2 instance '{instance_id}' with Minecraft tag started successfully")
              return {
                'statusCode': 200,
                'body': f'Minecraft instance {instance_id} started'
              }
            
            except Exception as e:
              print(f"Error starting instance: {e}")
              return {'message': f'Error starting Minecraft instance: {e}'}



      Runtime: 'python3.10'
      Timeout: 90


  ServerStartLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - Effect: 'Allow'
            Principal: 
              Service: 
                - 'lambda.amazonaws.com'
            Action: 
              - 'sts:AssumeRole'
      Policies: 
        - PolicyName: 'LambdaExecutionPolicy'
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              - Effect: 'Allow'
                Action: 
                  - 'ec2:StartInstances'
                  - 'ec2:DescribeInstances'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'  # TODO:  Limit to MinecraftServer
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  ServerStartRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: 'MinecraftApi'

  ServerStartGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId:
        Fn::GetAtt:
          - ServerStartRestApi
          - RootResourceId
      PathPart: 'server'
      RestApiId:
        Ref: 'ServerStartRestApi'

  ServerStartGatewayMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'GET'
      ResourceId:
        Ref: 'ServerStartGatewayResource'
      RestApiId:
        Ref: 'ServerStartRestApi'
      Integration:
        IntegrationHttpMethod: 'POST'
        TimeoutInMillis: 29000 
        Type: 'AWS_PROXY'
        Uri:
          Fn::Sub: 
            - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ServerStartLambdaFunction.Arn}/invocations'
            - { ServerStartLambdaFunction: { Ref: 'ServerStartLambdaFunction' } }

  ServerStartDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId:
        Ref: 'ServerStartRestApi'
      StageName: 'prod'
      
    DependsOn: [ServerStartGatewayMethod]

  ServerStartLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: 'ServerStartLambdaFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn:
        Fn::Sub: 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerStartRestApi}/*/GET/server'


  # BasePathMapping:
  #   Type: 'AWS::ApiGateway::BasePathMapping'
  #   Properties:
  #     DomainName: 
  #       Fn::Sub: 'start.${DomainName}'
  #     RestApiId: !Ref ServerStartRestApi
  #     Stage: 'prod'

  # Route53RecordSet:
  #   Type: 'AWS::Route53::RecordSet'
  #   Properties:
  #     HostedZoneId: !Ref Route53ZoneId
  #     Name: !Ref DomainName
  #     Type: 'A'
  #     AliasTarget:
  #       DNSName: !Sub 'start.${DomainName}'
  #       HostedZoneId: !Ref Route53ZoneId


Outputs:
  MinecraftServerArn:
    Description: ARN of the Minecraft server EC2 instance
    Value: !Ref MinecraftServer

  ApiUrl:
    Description: "URL of the API endpoint"
    Value: 
      Fn::Sub: "https://${ServerStartRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/server"